function Install-Chrome{
    Invoke-WebRequest "https://dl.google.com/chrome/install/latest/chrome_installer.exe" -OutFile "$env:TEMP\chrome_installer.exe"
    Start-Process -FilePath $downloadPath -ArgumentList "/silent /install" -Wait
}

function Install-MSCRedist{
    Invoke-WebRequest "https://aka.ms/vs/16/release/vc_redist.x64.exe" -OutFile "$env:TEMP\vc_redist.x64.exe"
    Start-Process -FilePath "$env:TEMP\vc_redist.x64.exe" -ArgumentList '/install /quiet /norestart' -Wait
}

function Install-WSL{
    # Enable WSL feature
    Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
    # Enable Virtual Machine feature
    Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform

    # Download Ubuntu 20.04 LTS from Microsoft Store
    $appName = "Ubuntu 20.04 LTS"
    $appInstaller = (Get-AppxPackage -Name $appName).InstallLocation + "\app.ico"
    if (!(Test-Path $appInstaller)) {
        (New-Object -ComObject Shell.Application).ShellExecute("ms-windows-store://pdp/?productid=9n6svws3rx71")
        Write-Output "Please download and install $appName from Microsoft Store."
        pause
    }

    # Set up Ubuntu
    $distro = "Ubuntu-20.04"
    $username = "yourusername"

    wsl --import $distro "C:\Users\$env:USERNAME\AppData\Local\Microsoft\WindowsApps\Ubuntu-20.04" --version 2
    wsl -d $distro -u root sh -c "apt update && apt upgrade -y && useradd -m $username && echo $username:password | chpasswd"
  
}

function Install-Git{
    Invoke-WebRequest "https://github.com/git-for-windows/git/releases/download/v2.31.1.windows.1/Git-2.31.1-64-bit.exe" -OutFile "$env:TEMP\GitInstaller.exe"
    Start-Process -FilePath "$env:TEMP\GitInstaller.exe" -ArgumentList '/VERYSILENT' -Wait
}

function Install-Golang{
    Invoke-WebRequest "https://golang.org/dl/go1.17.1.windows-amd64.msi" -OutFile "$env:TEMP\GoInstaller.msi"
    Start-Process -FilePath "msiexec.exe" -ArgumentList "/i $env:TEMP\GoInstaller.msi /quiet /qn" -Wait
}

function Install-VSCode{
    Invoke-WebRequest "https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-user" -OutFile "$env:TEMP\VSCodeInstaller.exe"
    Start-Process -FilePath "$env:TEMP\VSCodeInstaller.exe" -ArgumentList '/silent' -Wait    
}

function Install-Docker{
    Invoke-WebRequest "https://download.docker.com/win/stable/Docker%20Desktop%20Installer.exe" -OutFile "$env:TEMP\DockerDesktopInstaller.exe"
    Start-Process -FilePath "$env:TEMP\DockerDesktopInstaller.exe" -ArgumentList '/quiet' -Wait
    if (!(Get-Service Docker).Status -eq 'Running') {
        # Start Docker service
        Start-Service Docker
    }
}

function Install-Postman{
    Invoke-WebRequest "https://dl.pstmn.io/download/latest/win64" -OutFile "$env:TEMP\PostmanInstaller.exe"
    Start-Process -FilePath "$env:TEMP\PostmanInstaller.exe" -ArgumentList '/S' -Wait
}

function Install-ZAP{
    Invoke-WebRequest "https://github.com/zaproxy/zaproxy/releases/download/v2.10.0/ZAP_2.10.0_windows-x64.exe" -OutFile "$env:TEMP\ZAPInstaller.exe"
    Start-Process -FilePath "$env:TEMP\ZAPInstaller.exe" -ArgumentList '/S' -Wait
}
function Install-BurpSuiteCommunityEdition{
    Invoke-WebRequest "https://portswigger.net/burp/releases/download?product=community&version=2021.5.2&type=Windows" -OutFile "$env:TEMP\BurpSuiteInstaller.exe"
    Start-Process -FilePath "$env:TEMP\BurpSuiteInstaller.exe" -ArgumentList '/S' -Wait
}
function Set-Up-BurpSuiteCommunity{
    # Define the path to the Burp Suite Community Edition executable
    $burpPath = "C:\Program Files\BurpSuiteCommunity\burp.exe"

    # Define the local proxy to use
    $proxyAddress = "127.0.0.1:8080"

    # Start Burp Suite with the specified proxy configuration
    Start-Process $burpPath "-config={""proxy.server"":""$proxyAddress""}" -Wait

    # Download Burp Suite's CA certificate to the local machine
    $certUrl = "http://burp/cert"
    $certFilePath = "$env:USERPROFILE\Desktop\burp-ca.cer"
    Invoke-WebRequest $certUrl -OutFile $certFilePath

    # Install the downloaded certificate into the local machine's trusted root store
    $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
    $cert.Import($certFilePath)
    $store = New-Object System.Security.Cryptography.X509Certificates.X509Store([System.Security.Cryptography.X509Certificates.StoreName]::Root,[System.Security.Cryptography.X509Certificates.StoreLocation]::LocalMachine)
    $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)
    $store.Add($cert)
    $store.Close()
}
function Set-Up-PostmanProxy{
    # Define the path to the Postman executable
    $postmanPath = "C:\Program Files\Postman\Postman.exe"

    # Define the proxy server to use
    $proxyServer = "127.0.0.1:8080"

    # Define the SSL verification setting
    $sslVerification = "0"

    # Set the Postman environment variables for proxy and SSL verification
    Setx /M HTTP_PROXY $proxyServer
    Setx /M HTTPS_PROXY $proxyServer
    Setx /M NODE_TLS_REJECT_UNAUTHORIZED $sslVerification

    # Start Postman
    Start-Process $postmanPath
}