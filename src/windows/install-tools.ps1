Write-Host " __      __  _________________________ " -ForegroundColor White -BackgroundColor DarkRed
Write-Host "/  \    /  \/  _  \__    ___/\_____   \" -ForegroundColor White -BackgroundColor DarkYellow
Write-Host "\   \/\/   /  /_\  \|    |      /   __/" -ForegroundColor White -BackgroundColor DarkGreen
Write-Host " \        /    |    \    |     |   |   " -ForegroundColor White -BackgroundColor DarkCyan
Write-Host "  \__/\  /\____|__  /____|     |___|   " -ForegroundColor White -BackgroundColor DarkBlue
Write-Host "       \/         \/           <___>   " -ForegroundColor White -BackgroundColor DarkMagenta
Write-Host "---------------------------------------"
Write-Host "            WebApp Toolkit              "
Write-Host "        Use at your own risk!!!        "
Write-Host "---------------------------------------"

$packages = @(
    "PortSwigger.BurpSuiteCommunity",
    "Microsoft.VisualStudioCode",
    "Google.Chrome",
    "Microsoft.OpenJDK.17",
    "Oracle.JavaRuntimeEnvironment",
    "Git.Git",
    "GoLang.Go.1.20",
    "Docker.DockerDesktop",
    "Postman.Postman",
    "Microsoft.VCRedist.2015+.x64"
)

function Install-Packages{
    foreach ($package in $packages) {
        Write-Host "Installing package: $package"
        winget install --accept-source-agreements --silent -e --id $package
    }
}

function Install-WSL{
    Write-Host "Installing WSL..."
    # Enable WSL feature
    Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
    # Enable Virtual Machine feature
    Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform

    Write-Host "Setting Up Ubuntu - This will need a restart!"
    # Download Ubuntu 20.04 LTS from Microsoft Store
    $appName = "Ubuntu"
    $appInstaller = (Get-AppxPackage -Name $appName).InstallLocation + "\app.ico"
    if (!(Test-Path $appInstaller)) {
        (New-Object -ComObject Shell.Application).ShellExecute("ms-windows-store://pdp/?productid=9PDXGNCFSCZV")
        Write-Output "Please download and install $appName from Microsoft Store."
        pause
    }
}

function Install-ZAP{
    Write-Host "Installing OWASP ZAP..."
    Invoke-WebRequest "https://github.com/zaproxy/zaproxy/releases/download/v2.10.0/ZAP_2.10.0_windows-x64.exe" -OutFile "$env:TEMP\ZAPInstaller.exe"
    Start-Process -FilePath "$env:TEMP\ZAPInstaller.exe" -ArgumentList '/S' -Wait
}

function Set-Up-BurpSuiteCommunity{
    Write-Host "Burp Suite Community [2/3] - Setting up Burp Suite Community..."
    # Define the path to the Burp Suite Community Edition executable
    $burpPath = "$env:PROGRAMFILES\BurpSuiteCommunity\BurpSuiteCommunity.exe"

    # Define the local proxy to use
    $proxyAddress = "127.0.0.1:8080"
    Write-Host "Burp Suite Community [3/3] - Installing CA Cert into Trusted Root Authorities"
    # Start Burp Suite with the specified proxy configuration
    Start-Process $burpPath "-config={""proxy.server"":""$proxyAddress""}" -Wait

    # Download Burp Suite's CA certificate to the local machine
    $certUrl = "http://burp/cert"
    $certFilePath = "$env:USERPROFILE\Desktop\burp-ca.cer"
    Invoke-WebRequest $certUrl -OutFile $certFilePath

    # Install the downloaded certificate into the local machine's trusted root store
    $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
    $cert.Import($certFilePath)
    $store = New-Object System.Security.Cryptography.X509Certificates.X509Store([System.Security.Cryptography.X509Certificates.StoreName]::Root,[System.Security.Cryptography.X509Certificates.StoreLocation]::LocalMachine)
    $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)
    $store.Add($cert)
    $store.Close()
}
function Set-Up-PostmanProxy{
    Write-Host "Postman [2/2] - Setting up locahost:8080 proxy and disabling TLS..."
    # Define the path to the Postman executable
    $postmanPath = "$env:LOCALAPPDATA\Postman\Postman.exe"

    # Define the proxy server to use
    $proxyServer = "127.0.0.1:8080"

    # Define the SSL verification setting
    $sslVerification = "0"

    # Set the Postman environment variables for proxy and SSL verification
    Setx /M HTTP_PROXY $proxyServer
    Setx /M HTTPS_PROXY $proxyServer
    Setx /M NODE_TLS_REJECT_UNAUTHORIZED $sslVerification

    # Start Postman
    Start-Process $postmanPath
}

Install-Packages