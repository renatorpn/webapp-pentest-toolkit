function SetupYaml(){
    # Install required module if not already installed
    if (-not (Get-Module -Name PowerShellYaml -ListAvailable)) {
        Install-Module -Name powershell-yaml -Scope CurrentUser -Force
    }
    # Import the required module
    Import-Module -Name powershell-yaml
}

#
# https://docs.oracle.com/en/virtualization/virtualbox/6.0/user/vboxmanage-unattended.html
#
function ReadVMConfig(){
    SetupYaml
    $yamlFile = ".\vm_config.yml"
    $yamlContent = Get-Content -Path $yamlFile -Raw

    # Convert YAML to PowerShell objects
    $yamlData = ConvertFrom-Yaml $yamlContent
    $VMConfigs = [PSCustomObject]@{
        Name = $yamlData.VMName
        Memory = $yamlData.VMMemory
        DiskSize = $yamlData.VMDiskSize
        ISOPath = $yamlData.ISOPath
        Username = $yamlData.Username
        Password = $yamlData.Password
        Hostname = $yamlData.Hostname
        Locale = $yamlData.Locale
        Country = $yamlData.Country
        DiskPath = $yamlData.DiskPath
        Snapshot = $yamlData.Snapshot
        ProductKey = $yamlData.ProductKey
        InstallAdditions = $yamlData.InstallAdditions
        AdditionsISO = $yamlData.AdditionsISO
        TXS = $yamlData.TXS
        PackageSelectionAdjustment = $yamlData.PackageSelectionAdjustment
        DryRun = $yamlData.DryRun
        StartVM = $yamlData.StartVM
        AuxilaryBasePath = $yamlData.AuxilaryBasePath
        WindowsImageIndex = $yamlData.WindowsImageIndex
        ScriptTemplate = $yamlData.ScriptTemplate
        PostInstallTemplate = $yamlData.PostInstallTemplate
        PostInstallCommand = $yamlData.PostInstallCommand
        ExtraInstallKernelParams = $yamlData.ExtraInstallKernelParams
        WindowsLanguage = $yamlData.WindowsLanguage
    }
    return $VMConfigs
}


function CreateVM(){
    $config = ReadVMConfig
    $hashtable = @{}
    foreach( $property in $config.psobject.properties.name )
    {
        $hashtable[$property] = $config.$property
    }

    $parameters = ""

    foreach($item in $hashtable.GetEnumerator()){
        Switch($item.Key){
            "StartVM" {
                if($null -ne $item.Value){
                    $argv = "--start-vm " + $item.Value
                    [string]::Concat($parameters,$argv) 
                }
            }


        }
        #Write-Host ("Name: {0} Value: {1}" -f $item.Key, $item.Value)
    }

    Write-Host $parameters + "aaaa"
<#
# Create the VM
    VBoxManage createvm --name $config.Name --ostype Ubuntu_64 --register
    VBoxManage modifyvm $config.Name --memory $config.Memory
    VBoxManage createhd --filename $config.DiskPath --size $config.DiskSize
    VBoxManage storagectl $config.Name --name "SATA Controller" --add sata --controller IntelAHCI
    VBoxManage storageattach $config.Name --storagectl "SATA Controller" --port 0 --device 0 --type hdd --medium $config.DiskPath
    VBoxManage storagectl $config.Name --name "IDE Controller" --add ide
    VBoxManage storageattach $config.Name --storagectl "IDE Controller" --port 0 --device 0 --type dvddrive --medium $config.ISOPath

    

    VBoxManage unattended install $config `
    --iso=$config.ISOPath `
    --user=$config.Username --password $config.Password `
    --install-additions --time-zone=$config.Timezone `
    --hostname=$config.Hostname `
    --locale=$config.Locale


    # Start the VM and install Ubuntu
    VBoxManage startvm $config.Name --type $config.StartVM
    Write-Host "Waiting for the VM to start..."
    Start-Sleep -Seconds 60
#>}

CreateVM